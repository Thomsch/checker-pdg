package org.checkerframework.flexeme;

import com.sun.tools.javac.file.JavacFileManager;
import com.sun.tools.javac.util.Context;
import com.sun.tools.javac.util.List;
import org.checkerframework.flexeme.pdg.FilePdg;
import org.checkerframework.flexeme.pdg.PdgBuilder;
import org.checkerframework.javacutil.UserError;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.tools.JavaCompiler;
import javax.tools.JavaFileManager;
import javax.tools.JavaFileObject;
import javax.tools.ToolProvider;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Collections;

/**
 * Extracts a Program Dependency Graph (PDG) from a Java file using the CheckerFramework.
 * The PDG is generated by compiling the file and running a dataflow analysis on each method.
 * The PDG is built to Flexeme PDG's format.
 */
public class PdgExtractor {

    private static final Logger logger = LoggerFactory.getLogger(PdgExtractor.class);
    private final String compileOut;
    private final PdgBuilder pdgBuilder;

    private final DotPrinter dotPrinter;

    public PdgExtractor() {
        compileOut = "out/";
        pdgBuilder = new PdgBuilder();
        dotPrinter = new DotPrinter();
    }

    public static void main(String[] args) {
        if (args.length != 3) {
            logger.error("Usage: java PdgExtractor <file> <sourcePath> <classPath>");
            System.exit(1);
        }

        String file = args[0]; // Relative to the repository e.g., src/java/App.java
        String sourcePath = args[1];
        String classPath = args[2];
        String path_out = "pdg.dot"; // Where to write the PDG.

        PdgExtractor extractor = new PdgExtractor();
        try {
            extractor.run(file, sourcePath, classPath, path_out);
        } catch (Throwable e) {
            logger.error("Error while running the PDG extractor: " + e.getMessage(), e);
            System.exit(1);
        }
    }

    public void run(String file, String sourcePath, String classPath, String path_out) {
        // Compile file.
        FileProcessor processor = compileFile(file, compileOut, false, sourcePath, classPath);

        // Build the PDG for each method in the compiled file.
        FilePdg filePdg = pdgBuilder.buildPdgForFile(processor);

        // Write the PDG to disk in dot format.
        String dotGraphForFile = dotPrinter.printDot(filePdg);
        writePdgOnDisk(dotGraphForFile, path_out);
    }

    /**
     * Compiles a file and returns the processor with the compilation results.
     *
     * @param filepath        path to the file to compile
     * @param compile_out     where to put the compiled files
     * @param compile_verbose whether to print the compilation output
     * @param sourcePath      source path for the compilation
     * @param classPath       class path for the compilation
     * @return the processor with the compilation results
     */
    public FileProcessor compileFile(String filepath, String compile_out, boolean compile_verbose, String sourcePath, String classPath) {
        java.util.List<String> arguments = new ArrayList<>();
        arguments.add("-d");
        arguments.add(compile_out);

        if (compile_verbose) {
            arguments.add("-verbose");
        }

        arguments.add("-sourcepath");
        arguments.add(sourcePath);

        arguments.add("-classpath");
        arguments.add(classPath);

        arguments.add("-source");
        arguments.add("1.8");
        arguments.add("-target");
        arguments.add("1.8");

        arguments.add("-Xlint:none"); // Ignore warnings

        Context context = new Context();
        JavacFileManager.preRegister(context); // Necessary to have fileManager before javac.
        JavacFileManager fileManager = (JavacFileManager) context.get(JavaFileManager.class);
        Iterable<? extends JavaFileObject> jFile = fileManager.getJavaFileObjectsFromStrings(List.of(filepath));

        JavaCompiler javac = ToolProvider.getSystemJavaCompiler();

        StringWriter out = new StringWriter();

        JavaCompiler.CompilationTask task = javac.getTask(out, null, null, arguments, null, jFile);
        FileProcessor processor = new FileProcessor();
        task.setProcessors(Collections.singleton(processor));
        boolean result = task.call();

        if (!result) {
            throw new RuntimeException("Compilation failed for file: " + filepath, new Throwable(out.toString()));
        }

        return processor;
    }

    /**
     * Write the PDG to disk.
     *
     * @param pdg      A string representation of the PDG to write on disk.
     * @param path_out The path where to write the PDG.
     */
    private void writePdgOnDisk(final String pdg, final String path_out) {
        try (BufferedWriter out = new BufferedWriter(new FileWriter(path_out))) {
            out.write(pdg);
        } catch (IOException e) {
            throw new UserError("Error creating dot file (is the path valid?): all.dot", e);
        }
    }
}
